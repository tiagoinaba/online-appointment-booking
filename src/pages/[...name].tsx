import BookingForm from "@/components/BookingForm";
import DateTimePicker from "@/components/DateTimePicker";
import { prisma } from "@/server/db";
import { api } from "@/utils/api";
import { DateType, Inputs } from "@/utils/types";
import "@fontsource/roboto/300.css";
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";
import { Button } from "@mui/material";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";
import { SubmitHandler } from "react-hook-form";
import {
  GetStaticPaths,
  GetStaticPropsContext,
  InferGetStaticPropsType,
} from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { Toaster, toast } from "react-hot-toast";
import { now, today } from "@/utils/constants";

export default function Home({
  admin,
  notFound,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  const utils = api.useContext();

  const [date, setDate] = useState<DateType>({
    justDate: null,
    dateTime: null,
  });
  const [animate, setAnimate] = useState<boolean>(true);
  const router = useRouter();

  const { mutate: createReservation, isLoading: isCreating } =
    api.reservation.createReservation.useMutation({
      onSuccess: () => {
        toast.success("HorÃ¡rio reservado com sucesso!");
        utils.reservation.getAll.invalidate();
        utils.reservation.getByDateAdmin.invalidate();
        localStorage.setItem("adminInfo", JSON.stringify(admin));
        router.push("/success");
      },
      onError: (err) => {
        toast.error(err.message);
      },
    });

  const onSubmit: SubmitHandler<Inputs> = async (data) => {
    createReservation({
      adminId: admin!.id,
      date: date!.dateTime!,
      paymentId: null,
      ...data,
    });
  };

  return (
    <>
      <Head>
        <title>{admin ? admin.name : "Create T3 App"}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={`flex min-h-screen flex-col items-center overflow-x-hidden p-10`}
      >
        {!admin ? (
          <h1 className="text-2xl font-bold">404 - page not found</h1>
        ) : (
          <div
            className={`relative flex flex-col items-center justify-center ${
              !admin.requirePayment
                ? "-translate-x-1/2 rounded-l-3xl"
                : "rounded-3xl"
            } bg-slate-200 p-8`}
          >
            <h2
              onAnimationEnd={() => setAnimate(false)}
              className={`text-4xl font-bold ${animate && "animate-fadeIn"}`}
            >
              {date.dateTime
                ? format(date.dateTime, "dd 'de' MMMM, kk:mm", { locale: ptBR })
                : date.justDate
                ? format(date.justDate, "dd 'de' MMMM, --:--", { locale: ptBR })
                : "-- --, --:--"}
            </h2>

            <DateTimePicker
              date={date}
              setAnimate={setAnimate}
              setDate={setDate}
              adminId={admin?.id}
            />
            {admin.requirePayment ? (
              <Button
                className="mt-8"
                variant="contained"
                sx={{
                  color: "rgb(21, 101, 192)",
                  "&:hover": { color: "white" },
                }}
                disabled={(date.dateTime ? false : true) || isCreating}
                onClick={() => {
                  localStorage.setItem(
                    "dateTime",
                    date.dateTime!.toISOString()
                  );
                  if (admin)
                    localStorage.setItem("adminInfo", JSON.stringify(admin));
                  router.push("/booking");
                  // createReservation({ date: date.dateTime! })
                }}
              >
                {isCreating ? "Criando..." : "Reservar"}
              </Button>
            ) : (
              <div className="absolute right-0 flex h-full translate-x-full flex-col items-center justify-center rounded-r-3xl bg-slate-300 p-6 px-20">
                <BookingForm
                  onSubmit={onSubmit}
                  disabled={date.dateTime ? false : true}
                />
              </div>
            )}
          </div>
        )}

        <Toaster position="bottom-center" />
      </main>
    </>
  );
}

export const getStaticProps = async (context: GetStaticPropsContext) => {
  try {
    const { params } = context;
    if (params && params.name) {
      const admin = await prisma.admin.findFirst({
        where: { route: params.name[0] },
        select: {
          id: true,
          name: true,
          route: true,
          requirePayment: true,
          paymentValue: true,
          description: true,
        },
      });
      if (admin) {
        return { props: { admin } };
      }
      throw new Error("Not found");
    }
  } catch (err) {
    return { props: { notFound: true } };
  }
};

export const getStaticPaths: GetStaticPaths = async () => {
  return { paths: [], fallback: "blocking" };
};
