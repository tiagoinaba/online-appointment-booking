import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { api } from "@/utils/api";
import { DateCalendar, StaticDatePicker } from "@mui/x-date-pickers";
import "@fontsource/roboto/300.css";
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";
import { useEffect, useState } from "react";
import { add, format, isEqual, parseISO } from "date-fns";
import { RadioGroup, Radio } from "@mui/joy";
import { Button } from "@mui/material";
import { ptBR } from "date-fns/locale";
import { prisma } from "@/server/db";
import { Toaster, toast } from "react-hot-toast";
import DateTimePicker from "@/components/DateTimePicker";
import { DateType } from "@/utils/types";
import { useRouter } from "next/router";
import {
  GetStaticPaths,
  GetStaticProps,
  GetStaticPropsContext,
  InferGetStaticPropsType,
} from "next";
import { z } from "zod";
import { Admin, PrismaClient } from "@prisma/client";

export default function Home({
  admin,
  notFound,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  const utils = api.useContext();

  const [date, setDate] = useState<DateType>({
    justDate: null,
    dateTime: null,
  });
  const [animate, setAnimate] = useState<boolean>(true);
  const router = useRouter();

  const { mutate: createReservation, isLoading: isCreating } =
    api.reservation.createReservation.useMutation({
      onSuccess: () => {
        toast.success("HorÃ¡rio reservado com sucesso!");
        utils.reservation.getAll.invalidate();
        utils.reservation.getByDate.invalidate();
      },
      onError: (err) => {
        toast.error(err.message);
      },
    });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={`flex min-h-screen w-screen flex-col items-center justify-center overflow-y-scroll`}
      >
        {notFound ? (
          <h1 className="text-2xl font-bold">404 - page not found</h1>
        ) : (
          <div
            className={`flex min-h-screen w-screen flex-col items-center justify-center overflow-y-scroll`}
          >
            <h2
              onAnimationEnd={() => setAnimate(false)}
              className={`text-4xl font-bold ${animate && "animate-fadeIn"}`}
            >
              {date.dateTime
                ? format(date.dateTime, "dd 'de' MMMM, kk:mm", { locale: ptBR })
                : date.justDate
                ? format(date.justDate, "dd 'de' MMMM, --:--", { locale: ptBR })
                : "-- --, --:--"}
            </h2>

            <DateTimePicker
              date={date}
              setAnimate={setAnimate}
              setDate={setDate}
            />

            <Button
              className="mt-8"
              variant="contained"
              sx={{ color: "rgb(21, 101, 192)", "&:hover": { color: "white" } }}
              disabled={(date.dateTime ? false : true) || isCreating}
              onClick={() => {
                localStorage.setItem("dateTime", date.dateTime!.toISOString());
                router.push("/booking");
                // createReservation({ date: date.dateTime! })
              }}
            >
              {isCreating ? "Criando..." : "Reservar"}
            </Button>
          </div>
        )}

        <Toaster position="bottom-center" />
      </main>
    </>
  );
}

export const getStaticProps = async (context: GetStaticPropsContext) => {
  try {
    const { params } = context;
    if (params && params.name) {
      const admin = await prisma.admin.findFirst({
        where: { name: params.name[0] },
      });
      if (admin) return { props: { admin } };
      throw new Error("Not found");
    }
  } catch (err) {
    return { props: { notFound: true } };
  }
};

export const getStaticPaths: GetStaticPaths = async () => {
  return { paths: [], fallback: "blocking" };
};
