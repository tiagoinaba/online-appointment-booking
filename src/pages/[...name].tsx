import BookingForm from "@/components/BookingForm";
import Button from "@/components/Button";
import DateTimePicker from "@/components/DateTimePicker";
import MPWallet from "@/components/MPWallet";
import ProgressBar from "@/components/ProgressBar";
import ServicesCarouselClient from "@/components/ServicesCarouselClient";
import ClientLayout from "@/components/layouts/ClientLayout";
import { prisma } from "@/server/db";
import { api } from "@/utils/api";
import { DateType, Inputs } from "@/utils/types";
import "@fontsource/roboto/300.css";
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";
import { Service } from "@prisma/client";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";
import { Phone } from "lucide-react";
import {
  GetStaticPaths,
  GetStaticPropsContext,
  InferGetStaticPropsType,
} from "next";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { SubmitHandler } from "react-hook-form";
import { Toaster, toast } from "react-hot-toast";

export default function Home({
  admin,
  notFound,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  const utils = api.useContext();

  const [service, setService] = useState<Service | null>(null);

  const [date, setDate] = useState<DateType>({
    justDate: null,
    dateTime: null,
  });
  const [animate, setAnimate] = useState<boolean>(true);
  const [paymentStart, setPaymentStart] = useState<boolean>(false);
  const router = useRouter();
  const [step, setStep] = useState<number>(1);
  const [formData, setFormData] = useState<Inputs>({
    firstName: "",
    lastName: "",
    email: "",
    phoneNumber: "",
  });

  useEffect(() => {
    if (step === 1) {
      setDate({
        justDate: null,
        dateTime: null,
      });
    }
  }, [step]);

  useEffect(() => {
    if (service) {
      setStep(2);
    }
  }, [service]);

  const { mutate: createReservation, isLoading: isCreating } =
    api.reservation.createReservation.useMutation({
      onSuccess: () => {
        toast.success("Horário reservado com sucesso!");
        utils.reservation.getAll.invalidate();
        utils.reservation.getByDateAdmin.invalidate();
        router.push(`/success?name=${admin?.route}&date=${date.dateTime}`);
      },
      onError: (err) => {
        toast.error(err.message);
      },
    });

  const onSubmit: SubmitHandler<Inputs> = async (data) => {
    if (!admin?.AdminConfig?.requirePayment) {
      createReservation({
        adminId: admin!.id,
        date: date!.dateTime!,
        paymentId: null,
        serviceId: service?.id ? service.id : null,
        ...data,
      });
    } else {
      setFormData(data);
      setStep((prev) => prev + 1);
      await import("@mercadopago/sdk-react").then((res) => {
        res.initMercadoPago("APP_USR-46c56d9d-bbf4-4279-b234-aa246ee95f6f");
        setPaymentStart(true);
      });
    }
  };

  return (
    <>
      <Head>
        <title>{admin ? admin.name : "Create T3 App"}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ClientLayout>
        <main
          className={`flex min-h-screen flex-col items-center gap-10 overflow-x-hidden p-10`}
        >
          <ProgressBar
            steps={
              admin?.AdminConfig?.multipleServices &&
              admin.AdminConfig.requirePayment
                ? 4
                : admin?.AdminConfig?.requirePayment ||
                  admin?.AdminConfig?.multipleServices
                ? 3
                : 2
            }
            step={step}
            setStep={setStep}
          />
          {!admin ? (
            <h1 className="text-2xl font-bold">404 - page not found</h1>
          ) : !admin.AdminConfig?.multipleServices ? (
            step === 1 ? (
              <div
                className={`relative flex flex-col items-center justify-center rounded-xl border p-8 transition duration-300 hover:bg-zinc-200`}
              >
                <h2
                  onAnimationEnd={() => setAnimate(false)}
                  className={`text-4xl font-bold ${
                    animate && "animate-fadeIn"
                  }`}
                >
                  {date.dateTime
                    ? format(date.dateTime, "dd 'de' MMMM, kk:mm", {
                        locale: ptBR,
                      })
                    : date.justDate
                    ? format(date.justDate, "dd 'de' MMMM, --:--", {
                        locale: ptBR,
                      })
                    : "-- --, --:--"}
                </h2>
                <DateTimePicker
                  days={admin.Day}
                  date={date}
                  setAnimate={setAnimate}
                  setDate={setDate}
                  adminId={admin?.id}
                  opening={{
                    openingHours: {
                      hours: new Date(
                        admin.AdminConfig?.openingHours!
                      ).getHours()!,
                      minutes: new Date(
                        admin.AdminConfig?.openingHours!
                      ).getMinutes(),
                    },
                    closingHours: {
                      hours: new Date(
                        admin.AdminConfig?.closingHours!
                      ).getHours()!,
                      minutes: new Date(
                        admin.AdminConfig?.closingHours!
                      ).getMinutes(),
                    },
                    interval: {
                      hours: new Date(admin.AdminConfig?.interval!).getHours(),
                      minutes: new Date(
                        admin.AdminConfig?.interval!
                      ).getMinutes(),
                    },
                  }}
                />
                <Button
                  className="mt-8"
                  disabled={step >= 2 || !date.dateTime}
                  onClick={() => {
                    setStep(2);
                  }}
                >
                  Próximo
                </Button>
              </div>
            ) : step === 2 ? (
              <div className="flex h-full flex-col items-center justify-center rounded-3xl border p-6 px-20 transition duration-300 hover:bg-zinc-100">
                <BookingForm onSubmit={onSubmit} disabled={paymentStart} />
              </div>
            ) : (
              <div className="flex h-full flex-col items-center justify-center rounded-3xl bg-zinc-300 p-6 px-20">
                {paymentStart && (
                  <MPWallet
                    firstName={formData.firstName}
                    lastName={formData.lastName}
                    admin={admin}
                    adminConfig={admin!.AdminConfig!}
                    date={date.dateTime!}
                    paymentStart={paymentStart}
                    serviceId={service?.id}
                    email={formData.email}
                  />
                )}
              </div>
            )
          ) : step === 1 ? (
            <div className="flex w-full max-w-[800px] flex-col gap-8 rounded-xl border p-12 transition duration-300 hover:bg-zinc-50">
              <ServicesCarouselClient
                services={admin.Service}
                setService={setService}
              />
            </div>
          ) : step === 2 && service ? (
            <div
              className={`relative flex flex-col items-center justify-center
              rounded-3xl p-8 transition duration-300 lg:border lg:hover:bg-zinc-50`}
            >
              <h2
                onAnimationEnd={() => setAnimate(false)}
                className={`text-2xl font-bold md:text-4xl ${
                  animate && "animate-fadeIn"
                }`}
              >
                {date.dateTime
                  ? format(date.dateTime, "dd 'de' MMMM, kk:mm", {
                      locale: ptBR,
                    })
                  : date.justDate
                  ? format(date.justDate, "dd 'de' MMMM, --:--", {
                      locale: ptBR,
                    })
                  : "-- --, --:--"}
              </h2>
              <DateTimePicker
                days={admin.Day}
                date={date}
                setAnimate={setAnimate}
                setDate={setDate}
                adminId={admin?.id}
                serviceId={service.id}
                opening={{
                  openingHours: {
                    hours: new Date(
                      admin.AdminConfig?.openingHours!
                    ).getHours()!,
                    minutes: new Date(
                      admin.AdminConfig?.openingHours!
                    ).getMinutes(),
                  },
                  closingHours: {
                    hours: new Date(
                      admin.AdminConfig?.closingHours!
                    ).getHours()!,
                    minutes: new Date(
                      admin.AdminConfig?.closingHours!
                    ).getMinutes(),
                  },
                  interval: {
                    hours: new Date(admin.AdminConfig?.interval!).getHours(),
                    minutes: new Date(
                      admin.AdminConfig?.interval!
                    ).getMinutes(),
                  },
                }}
              />
              <Button
                onClick={() => setStep((prev) => prev + 1)}
                className="mt-8"
                disabled={!date.dateTime}
              >
                Próximo
              </Button>
            </div>
          ) : step === 3 ? (
            <div className="flex h-full w-full items-center justify-center rounded-3xl border px-6 py-6 transition duration-300 hover:bg-zinc-50 lg:w-3/4 lg:px-40">
              <BookingForm
                onSubmit={onSubmit}
                disabled={date.dateTime ? false : true}
              />
            </div>
          ) : (
            <div className="flex h-full flex-col items-center justify-center rounded-3xl border p-6 px-20 transition duration-300 hover:bg-zinc-100">
              {paymentStart && (
                <MPWallet
                  firstName={formData.firstName}
                  lastName={formData.lastName}
                  admin={admin}
                  adminConfig={admin!.AdminConfig!}
                  date={date.dateTime!}
                  paymentStart={paymentStart}
                  email={formData.email}
                  serviceId={service?.id}
                />
              )}
            </div>
          )}
          <div className="flex w-full max-w-[800px] flex-col items-center gap-4 rounded-xl border p-10 transition duration-300 hover:bg-zinc-100">
            <div className="flex items-center gap-4">
              {admin?.AdminConfig?.logoUrl && (
                <div className="relative h-16 w-16 overflow-hidden rounded-full">
                  <Image
                    src={admin?.AdminConfig?.logoUrl}
                    alt="logo"
                    fill
                    quality={80}
                    style={{ objectFit: "cover" }}
                  />
                </div>
              )}
              <p className="text-xl font-bold">{admin?.name}</p>
            </div>
            <p>{admin?.AdminConfig?.description}</p>
            <div className="flex items-center gap-1 text-zinc-500">
              <Phone className="h-4 w-4" />
              <span className="text-sm">{admin?.AdminConfig?.phoneNumber}</span>
            </div>
          </div>
          <Toaster position="bottom-center" />
        </main>
      </ClientLayout>
    </>
  );
}

export const getStaticProps = async (context: GetStaticPropsContext) => {
  try {
    const { params } = context;
    if (params && params.name) {
      let admin = await prisma.admin.findFirst({
        where: { route: params.name[0] },
        select: {
          id: true,
          name: true,
          route: true,
          AdminConfig: true,
          Service: true,
          Day: true,
        },
      });
      if (admin) {
        admin = JSON.parse(JSON.stringify(admin));
        return { props: { admin } };
      }
      throw new Error("Not found");
    }
  } catch (err) {
    return { props: { notFound: true } };
  }
};

export const getStaticPaths: GetStaticPaths = async () => {
  return { paths: [], fallback: "blocking" };
};
