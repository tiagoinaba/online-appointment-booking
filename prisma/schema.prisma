// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model Admin {
    id             String        @id @default(cuid())
    name           String        @unique
    route          String
    email          String        @unique
    password       String
    requirePayment Boolean       @default(true)
    paymentValue   Float         @default(10.00)
    description    String        @default("Reserve seu hor치rio j치!")
    Reservation    Reservation[]
    AdminConfig    AdminConfig?
}

model AdminConfig {
    id             String  @id @default(cuid())
    admin          Admin   @relation(fields: [adminId], references: [id])
    adminId        String  @unique
    requirePayment Boolean @default(true)
    paymentValue   Float   @default(10.00)
    description    String  @default("Reserve seu hor치rio j치!")

    @@index([adminId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Barber {
    id           String        @id @default(cuid())
    name         String
    reservations Reservation[]
}

model Reservation {
    id          String   @id @default(cuid())
    admin       Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
    adminId     String
    barber      Barber?  @relation(fields: [barberId], references: [id], onDelete: Cascade)
    barberId    String?
    paymentIdMP String?
    name        String
    email       String
    justDate    DateTime
    dateTime    DateTime
    createdAt   DateTime @updatedAt

    @@unique([dateTime, barberId])
    @@index([barberId])
    @@index([adminId])
}
