// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "zod-prisma-types"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Admin {
    id          String        @id @default(cuid())
    name        String        @unique
    route       String
    email       String        @unique
    password    String
    Reservation Reservation[]
    AdminConfig AdminConfig?
    Service     Service[]
    ClosedDays  ClosedDays[]
    Day         Day[]
}

model AdminConfig {
    id               String   @id @default(cuid())
    admin            Admin    @relation(fields: [adminId], references: [id])
    adminId          String   @unique
    requirePayment   Boolean  @default(true)
    paymentValue     Float    @default(10.00)
    description      String   @default("Reserve seu horário já!")
    openingHours     DateTime
    closingHours     DateTime
    interval         DateTime
    multipleServices Boolean  @default(false)

    @@index([adminId])
}

model ClosedDays {
    id         String   @id @default(cuid())
    admin      Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
    adminId    String
    dateClosed DateTime

    @@index([adminId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Service {
    id           String        @id @default(cuid())
    adminId      String
    admin        Admin         @relation(fields: [adminId], references: [id], onDelete: Cascade)
    imageUrl     String?
    imageKey     String?
    name         String
    reservations Reservation[]

    @@unique([adminId, name])
    @@index([adminId])
}

model Reservation {
    id            String   @id @default(cuid())
    admin         Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
    adminId       String
    service       Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    serviceId     String?
    paymentIdMP   String?  @unique
    paymentStatus String?
    name          String
    email         String
    justDate      DateTime
    dateTime      DateTime
    createdAt     DateTime @updatedAt

    @@unique([dateTime, serviceId])
    @@index([serviceId])
    @@index([adminId])
}

model Day {
    weekDay     Int
    admin       Admin    @relation(fields: [adminId], references: [id])
    adminId     String
    open        Boolean  @default(false)
    openingHour DateTime
    closingHour DateTime
    interval    DateTime

    @@unique([weekDay, adminId])
    @@index([adminId])
}
